---
export interface Props {
  title: string;
  description?: string;
}

const { title, description = "Deploy one AI agent. Free 14-day pilot. Replace 40+ hours/month with bespoke automationâ€”fully remote, secure, and tailored to your workflow." } = Astro.props;
---

<!DOCTYPE html>
<html lang="en" data-theme="dark">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="color-scheme" content="dark light" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    
    <!-- Open Graph -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="/og-image.png" />
    
    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content="/og-image.png" />
    
    <title>{title}</title>
    
    <!-- PicoCSS -->
    <link rel="stylesheet" href="/node_modules/@picocss/pico/css/pico.min.css" />
    
    <!-- Fonts -->
    <link rel="stylesheet" href="/node_modules/@fontsource-variable/inter/index.css" />
    <link rel="stylesheet" href="/node_modules/@fontsource-variable/jetbrains-mono/index.css" />
    
    <!-- Custom CSS -->
    <style>
      :root {
        /* Premium Color Tokens */
        --bg: #0B0F14;
        --card: rgba(255,255,255,0.04);
        --brand: #5BA8FF;
        --accent: #FF7A45;
        --text: #E6EDF3;
        --muted: #9AA7B2;
        --border: rgba(255,255,255,0.1);
        --surface: rgba(255,255,255,0.02);
        --surface-hover: rgba(255,255,255,0.06);
        
        /* Typography */
        --font-family: 'Inter Variable', system-ui, sans-serif;
        --font-family-mono: 'JetBrains Mono Variable', monospace;
        
        /* Spacing */
        --container-padding: clamp(1rem, 4vw, 2rem);
        --section-padding: clamp(3rem, 8vw, 6rem);
        
        /* Effects */
        --glass-blur: blur(20px);
        --gloss-gradient: linear-gradient(135deg, rgba(255,255,255,0.1) 0%, transparent 50%, rgba(255,255,255,0.05) 100%);
        --reflection: linear-gradient(45deg, transparent 30%, rgba(255,255,255,0.03) 50%, transparent 70%);
      }
      
      * {
        font-family: var(--font-family);
      }
      
      code, pre {
        font-family: var(--font-family-mono);
      }
      
      body {
        background: var(--bg);
        color: var(--text);
        line-height: 1.6;
        overflow-x: hidden;
      }
      
      /* Container & Layout */
      .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 var(--container-padding);
      }
      
      /* Premium Glass Effects */
      .glass {
        background: var(--card);
        backdrop-filter: var(--glass-blur);
        border: 1px solid var(--border);
        border-radius: 16px;
        position: relative;
        overflow: hidden;
      }
      
      .glass::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: var(--gloss-gradient);
        pointer-events: none;
        opacity: 0.3;
      }
      
      .glass-reflection {
        position: relative;
        overflow: hidden;
      }
      
      .glass-reflection::after {
        content: '';
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: var(--reflection);
        transform: rotate(45deg);
        pointer-events: none;
        opacity: 0.1;
        animation: reflection-shift 8s ease-in-out infinite;
      }
      
      @keyframes reflection-shift {
        0%, 100% { transform: rotate(45deg) translateX(-100%); }
        50% { transform: rotate(45deg) translateX(100%); }
      }
      
      /* Gradient Background */
      .gradient-bg {
        background: linear-gradient(135deg, var(--bg) 0%, #1a1a2e 50%, var(--bg) 100%);
        background-size: 400% 400%;
        animation: gradientShift 20s ease infinite;
      }
      
      @keyframes gradientShift {
        0% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
        100% { background-position: 0% 50%; }
      }
      
      /* Mobile Optimizations */
      @media (max-width: 768px) {
        :root {
          --container-padding: 1rem;
          --section-padding: 3rem 0;
        }
        
        h1 {
          font-size: clamp(2rem, 8vw, 3.5rem) !important;
          line-height: 1.1 !important;
        }
        
        h2 {
          font-size: clamp(1.5rem, 6vw, 2.5rem) !important;
        }
        
        .button {
          min-height: 44px;
          padding: 0.75rem 1.5rem !important;
          font-size: 1rem !important;
        }
      }
      
      /* Accessibility */
      @media (prefers-reduced-motion: reduce) {
        .gradient-bg {
          animation: none;
        }
        
        .glass-reflection::after {
          animation: none;
        }
      }
      
      @media (prefers-contrast: high) {
        :root {
          --card: rgba(255,255,255,0.1);
          --border: rgba(255,255,255,0.3);
        }
      }
      
      /* Focus States */
      .button:focus-visible,
      a:focus-visible {
        outline: 2px solid var(--brand);
        outline-offset: 2px;
      }
      
      /* Back to Top Button */
      .back-to-top {
        position: fixed;
        bottom: 2rem;
        right: 2rem;
        width: 56px;
        height: 56px;
        background: var(--brand);
        border: none;
        border-radius: 50%;
        color: white;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        visibility: hidden;
        transform: translateY(20px);
        transition: all 0.3s ease;
        z-index: 1000;
        box-shadow: 0 4px 20px rgba(91, 168, 255, 0.3);
      }
      
      .back-to-top.visible {
        opacity: 1;
        visibility: visible;
        transform: translateY(0);
      }
      
      .back-to-top:hover {
        background: #4a8fdb;
        transform: translateY(-2px);
        box-shadow: 0 6px 25px rgba(91, 168, 255, 0.4);
      }
      
      @media (max-width: 768px) {
        .back-to-top {
          bottom: 1rem;
          right: 1rem;
          width: 48px;
          height: 48px;
        }
      }
    </style>
  </head>
  <body>
    <slot />
    
    <!-- Back to Top Button -->
    <button 
      class="back-to-top" 
      id="back-to-top"
      aria-label="Back to top"
      title="Back to top">
      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="m18 15-6-6-6 6"/>
      </svg>
    </button>
    
    <script>
      // Back to top functionality
      const backToTop = document.getElementById('back-to-top');
      
      window.addEventListener('scroll', () => {
        if (window.scrollY > 600) {
          backToTop?.classList.add('visible');
        } else {
          backToTop?.classList.remove('visible');
        }
      });
      
      backToTop?.addEventListener('click', () => {
        window.scrollTo({ top: 0, behavior: 'smooth' });
      });
      
      // Keyboard navigation
      backToTop?.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          window.scrollTo({ top: 0, behavior: 'smooth' });
        }
      });
    </script>
  </body>
</html>
